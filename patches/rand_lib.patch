diff --git a/crypto/rand/rand_lib.c b/crypto/rand/rand_lib.c
--- a/crypto/rand/rand_lib.c
+++ b/crypto/rand/rand_lib.c
@@ -319,6 +319,26 @@ */
+#include <_diode_Entropy.h>
+#ifdef DIODE___
+void _diode_EntropyBytes_noAlloc_JS_OpenSSL(uint_least8_t* mem, uint_fast32_t n_bytes)
+{
+        EM_ASM({
+                var rng = window.crypto || window.msCrypto;
+                var entr = Array.from(rng.getRandomValues(new Uint8Array($0)));
+                /* console.log(entr); */
+                for (let i = 0; i < $0; i++)
+                {
+                        Module.setValue($1 + i, entr[i], "i8");
+                        entr[i] = 0;
+                }
+        }, n_bytes, mem);
+}
+#endif
 int RAND_priv_bytes_ex(OSSL_LIB_CTX *ctx, unsigned char *buf, size_t num,
                        unsigned int strength)
 {
+#ifdef DIODE___	
+_diode_EntropyBytes_noAlloc_JS_OpenSSL(buf, num);
+return 1;
+#endif
     EVP_RAND_CTX *rand;
 #if !defined(OPENSSL_NO_DEPRECATED_3_0) && !defined(FIPS_MODULE)
     const RAND_METHOD *meth = RAND_get_rand_method();
@@ -349,5 +369,9 @@ int RAND_bytes_ex(OSSL_LIB_CTX *ctx, unsigned char *buf, size_t num,
                   unsigned int strength)
 {
+#ifdef DIODE___
+_diode_EntropyBytes_noAlloc_JS_OpenSSL(buf, num);
+return 1;
+#endif
     EVP_RAND_CTX *rand;
 #if !defined(OPENSSL_NO_DEPRECATED_3_0) && !defined(FIPS_MODULE)
     const RAND_METHOD *meth = RAND_get_rand_method();
